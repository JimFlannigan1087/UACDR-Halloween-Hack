//Last version LZDoom supports
version "4.6.1"

//Statusbar Remover
class JimGZDoomStatusBarIsDogshitTrannyCodeFuckThatShit : BaseStatusBar {
	override void Init() { Super.Init(); SetSize(0, 320, 200); }
	override void Draw (int state, double TicFrac) { Super.Draw (state, TicFrac); }
}
class JimGZDoomFullStatusBarIsAlsoDogshitTrannyCodeFuckThatShit : AltHud {
    override void Draw(PlayerInfo CPlayer, int w, int h) {}
}

//Event handler
class UACDRHalloweenEventHandler : EventHandler {
	PlayerInfo p;

    //World load
	override void WorldLoaded(WorldEvent e) {
    
    }

    //World tick
	override void WorldTick() {
		//Prepare the playerinfo
        p = players[ consoleplayer ];
    }

    //Renderer
    ui int resolutionX;
    ui int resolutionY;
	ui int scale;
   
    //Use ID
	ui void DrawImageScrId(TextureID texm, vector2 shapePos, vector2 shapeSize, color col = color(255, 255, 255, 255), bool add = false) {
		Screen.DrawTexture(texm, false, int(shapePos.x), int(shapePos.y), DTA_DestWidthF, shapeSize.x, DTA_DestHeightF, shapeSize.y, DTA_Color, col, DTA_LegacyRenderStyle, add ? STYLE_Add : STYLE_Normal); // etc
	}

	ui void DrawImageScr(string texm, vector2 shapePos, vector2 shapeSize, color col = color(255, 255, 255, 255), bool add = false) {
		Screen.DrawTexture(TexMan.checkForTexture(texm, TexMan.Type_Any), false, int(shapePos.x), int(shapePos.y), DTA_DestWidthF, shapeSize.x, DTA_DestHeightF, shapeSize.y, DTA_Color, col, DTA_LegacyRenderStyle, add ? STYLE_Add : STYLE_Normal); // etc
	}

    //Draw stat, can be overriden later
    ui void DrawPersona5Number(int Number, int Count, Color col1, Color col2, int x, int y) {
        Number = max(0, Number);
        for(int i = 0; i < Count; i++) {
            DrawImageScr(string.format("P5_N%d", Number % 10), (x + scale - (i * 11) * scale, y + scale + i * scale), (10, 14) * scale, color(255, 0, 0, 0), false);
            DrawImageScr(string.format("P5_N%d", Number % 10), (x - scale - (i * 11) * scale, y - scale + i * scale), (14, 18) * scale, color(255, 0, 0, 0), false);
            DrawImageScr(string.format("P5_N%d", Number % 10), (x - (i * 11) * scale, y + i * scale), (12, 16) * scale, Number > 0 ? col1 : col2, true);
            Number /= 10;
        }
    }

    //Draw a single stat area
    ui void DrawPersona5Stat(string Image, int Bar1, int Bar2, int MBar1, int MBar2, int x, int y) {
        DrawImageScr(Image, (x, y), (114, 81) * scale);

        DrawPersona5Number(Bar1, 3, color(255, 0x00, 0xf9, 0xdb), color(255, 0x00 / 2, 0xf9 / 2, 0xdb / 2), x + 49 * scale, y + 35 * scale);
        DrawPersona5Number(Bar2, 3, color(255, 0xff, 0x62, 0xed), color(255, 0xff / 2, 0x62 / 2, 0xed / 2), x + 87 * scale, y + 30 * scale);

        //26, 47
        double BarSize = (double(Bar1) / double(MBar1)) * 56;
		Screen.DrawTexture(TexMan.checkForTexture("P5_BAR1", TexMan.Type_Any), false, 
            x + 26 * scale, y + 47 * scale,
            DTA_DestWidthF, BarSize * scale, DTA_DestHeightF, 12 * scale,
            DTA_SrcWidth, BarSize,
            DTA_Color, color(255, 255, 255, 255), DTA_LegacyRenderStyle, STYLE_Add
        );
        BarSize = (double(Bar2) / double(MBar2)) * 55;
		Screen.DrawTexture(TexMan.checkForTexture("P5_BAR2", TexMan.Type_Any), false, 
            x + 37 * scale, y + 50 * scale,
            DTA_DestWidthF, BarSize * scale, DTA_DestHeightF, 16 * scale,
            DTA_SrcWidth, BarSize,
            DTA_Color, color(255, 255, 255, 255), DTA_LegacyRenderStyle, STYLE_Add
        );
    }

    //Get ammo
	ui Ammo, Ammo, int, int GetCurrentAmmo () const {
		Ammo ammo1, ammo2;
		if (p.ReadyWeapon != NULL) {
			ammo1 = p.ReadyWeapon.Ammo1;
			ammo2 = p.ReadyWeapon.Ammo2;
			if (ammo1 == NULL) {
				ammo1 = ammo2;
				ammo2 = NULL;
			}
		} else {
			ammo1 = ammo2 = NULL;
		}
		let ammocount1 = ammo1 != NULL ? ammo1.Amount : 0;
		let ammocount2 = ammo2 != NULL ? ammo2.Amount : 0;
		return ammo1, ammo2, ammocount1, ammocount2;
	}

    //Main
	override void RenderOverlay(RenderEvent e) {	
		if(!p) { return; }
		if(!p.mo) { return; }
        if(level.mapname ~== "TITLEMAP") { return; }
        if(p.camera != p.mo) { return; }

		//Screen Resolution
		resolutionX = Screen.GetWidth();
		resolutionY = Screen.GetHeight();

        //Would make this a decimal but fuck you
        scale = max(1, resolutionY / 240);
        DrawPersona5Stat("P5_MPLAY", p.mo.health, p.mo.FindInventory("SpiritPoints").Amount, 200, 200, resolutionX - 108 * scale, resolutionY - 77 * scale);

        //Ammo
		Inventory ammotype1, ammotype2;
		[ammotype1, ammotype2] = GetCurrentAmmo();
		if(ammotype1 && !(ammotype1 is "SpiritPoints")) {
            DrawPersona5Number(ammotype1.Amount, 4, color(255, 0xff, 0xff, 0xff), color(255, 0x7f, 0x7f, 0x7f), 40 * scale, resolutionY - 24 * scale);
		}

		// Draw the keys. This does not use a special draw function like SBARINFO because the specifics will be different for each mod
		// so it's easier to copy or reimplement the following piece of code instead of trying to write a complicated all-encompassing solution.
		Vector2 keypos = (resolutionX - 8, resolutionY - 8);
		int rowc = 0;
		for(let i = p.mo.Inv; i != null; i = i.Inv) {
			if (i is "Key" && i.Icon.IsValid()) {
				Vector2 size = TexMan.GetScaledSize(i.Icon);
                DrawImageScrId(i.Icon, keypos, size);
				keypos.X -= size.X + 1;
			}
		}
    }
}


//wonder what'll happen if I toss Realm667 ZSCRIPT shit down here lol
//Death Incarnate superboss
//Monster-Death Incarnate
Class Incarnate : Actor
{
  Default
  {
    Health 8000;
    Radius 20;
    Height 56;
    Mass 500;
    Speed 12;
    PainChance 64;
    Damagefactor "IncarnateShot", 0;
    Obituary "%o was killed by Death Incarnate's glare.";
    HitObituary "%o was beaten to death by Death Incarnate.";
    SeeSound "monster/incsit";
    PainSound "skeleton/pain";
    DeathSound "monster/incdth";
    ActiveSound "monster/incact";
    AttackSound "monster/incatk";
    MONSTER;
    +FLOORCLIP
    +SHORTMISSILERANGE
    +DONTHARMCLASS
    // [MagicWazard] Note to modders: adding a GibHealth value of 50 - 100 will make
    // it easier to trigger his Hades Sphere-spawning XDeath sequence
  }

  States
  {
  Spawn:
    INCA AB 10 A_Look();
    Loop;
  See:
    INCA AABBCCDDEEFF 2 A_Chase();
    Loop;
  Melee:
    INCA G 0 A_Jump(128, "Melee2");
    INCA G 0 A_FaceTarget();
    INCA G 6 A_SkelWhoosh();
    INCA H 6 A_FaceTarget();
    INCA I 6 A_CustomMeleeAttack(7*random(1,8), "monster/inchit");
    Goto See;
  Melee2:
    INCA R 0 A_FaceTarget();
    INCA R 5 A_SkelWhoosh();
    INCA S 5 A_FaceTarget();
    INCA T 5 A_CustomMeleeAttack(7*random(1,8), "monster/inchit");
    INCA G 0 A_FaceTarget();
    INCA G 5 A_SkelWhoosh();
    INCA H 5 A_FaceTarget();
    INCA I 5 A_CustomMeleeAttack(7*random(1,8), "monster/inchit");
    Goto See;
  Missile:
    INCA J 5 A_FaceTarget();
    INCA J 5;
    INCA U 10 Bright A_CustomBulletAttack(30,0,5,3,"DIpuff",1024);
    INCA K 10;
    Goto See;
  Pain:
    INCA L 5;
    INCA L 5 A_Pain();
    Goto See;
  Death:
    INCA L 0 A_Jump(192, "Death2");
    INCA LM 7;
    INCA N 7 A_Scream();
    INCA O 7 A_NoBlocking();
    INCA P 7;
    INCA Q -1;
    Stop;
  Death2: //Can revive
    INCA LM 7;
    INCA N 7 A_Scream();
    INCA O 7 A_NoBlocking();
    INCA P 7;
    INCA Q 0 A_Jump(192,4);
    INCA Q 0 A_Jump(128,4);
    INCA Q 0 A_Jump(96,4);
    INCA Q 0 A_Jump(64,4);
    INCA Q 115;
    INCA Q 115;
    INCA Q 115;
    INCA Q 115;
    INCA Q 115;
    INCA Q -1 Thing_Raise(0);
    Stop;
  XDeath:
    INCX A 10 Bright A_Playsound("monster/incexp");
    INCX BC 5 Bright;
    INCX D 5 Bright A_NoBlocking();
    INCX D 0 Bright A_SpawnItem("HS",0,32);
    INCX EFGHIJ 5 Bright;
    INCX K -1;
  Raise:
    INCA Q 0 A_KillChildren();
    INCA QPONML 5;
    Goto See;
  }
}


//new visible puff
Class DIPuff : Actor
{
  Default
  {
    RENDERSTYLE "Add";
    DamageType "IncarnateShot";
    +NOBLOCKMAP;
    +NOGRAVITY;
    +RANDOMIZE;
    +PUFFONACTORS;
  }

  States
  {
  Spawn:
    INPF ABCDE 3 Bright;
    Stop;
  }
}


//old invisible puff
/*Class DIPuff : actor
{
  Default
  {
    Radius 0;
    Height 1;
    Speed 0;
    RENDERSTYLE "NONE";
    DamageType "IncarnateShot";
    PROJECTILE;
  }

  States
  {
  Spawn:
    TNT1 A 2 Bright;
    Stop;
  }
}*/
//End of Incarnate





//Hades Sphere
Class HS : Actor
{
  Default
  {
    Health 35;
    Radius 24;
    Height 48;
    Mass 3000;
    Speed 10;
    Obituary "%o was blown away by a Hades Sphere.";
    SeeSound "monster/hadsit";
    DeathSound "monster/hadexp";
    Monster;
    +LOOKALLAROUND
    +DONTGIB
    +NOTARGET
    +NOGRAVITY
    +FLOAT
    +DONTFALL
    //+DONTHARMCLASS // [MagicWazard] See "notes" below
  }

  States
  {
  Spawn:
    TNT1 A 1 Bright A_Look();
    Loop;
  See:
    HADE EFGH 4 Bright;
  SeeLoop:
    HADE A 2 Bright A_Playsound("monster/hadwlk");
    HADE ABBCCDD 2 Bright HS_SpecialChase();  // [Blue Shadow] Conditional A_Chase
    TNT1 A 0
    {
      if(!random(0, 7) && !bSkullfly) //A_Jump(32, "TeleportOut") when the SKULLFLY flag is off
        return ResolveState("TeleportOut");
      return ResolveState(null);
    }
    Loop;
  TeleportOut:
    TNT1 A 0 A_UnSetSolid();
    TNT1 A 0 A_UnSetShootable();
    HADE H 5 Bright A_Playsound("monster/hadtel");
    HADE GFEIJKL 4 Bright;
  SeeTeleport:
    TNT1 AAAAAAAA 2 A_Chase(null, null);
    TNT1 A 0 A_Jump(96, "TeleportIn");
    Loop;
  TeleportIn:
    HADE L 3 Bright A_Playsound("monster/hadtel");
    HADE KJIEFG 4 Bright;
    TNT1 A 0 A_SetShootable();
    TNT1 A 0 A_SetSolid();
    Goto SeeLoop;
  Melee:
    TNT1 A 0 A_SetInvulnerable();
    HADE HGFE 4 Bright;
    TNT1 A 0 A_UnSetInvulnerable();
    TNT1 A 0 A_SetShootable();
    TNT1 A 0 A_Die();
    Stop;
  Death:
    TNT1 A 0 A_NoBlocking();
    TNT1 A 0 A_SetTranslucent(0.9, 1);
    TNT1 A 0 A_Scream();
    HADE M 4 Bright A_Explode(112, 112, XF_NOTMISSILE);
    HADE NOPQ 5 Bright;
    Stop;
  XDeath:
    TNT1 A 0 A_Noblocking();
    HADE H 5 Bright A_PlaySound("monster/haddth");
    HADE GFE 4 Bright;
    HADE RSTUVWX 4 Bright;
    Stop;
  Death.Ice:
    "####" "#" 0 { bNoGravity=false; }
    Goto GenericFreezeDeath;
  }

  // [Blue Shadow] Depending on whether or not the Hades Sphere is currently flying
  // (due to A_SkullAttack), choose the appropriate "chase mode".
  // [ Ghastly ] This is now a new function, rather than an inventory item.
  void HS_SpecialChase()
  {
    if( bSkullFly )
      A_Chase(null, null);
    else
      A_Chase();
  }
}

// [MagicWazard] NOTES: +DONTHARMCLASS was originally enabled, but HS were still
// able to damage each other with self-destructs due to way the self-destruct
// was coded. Now that the self-destruct code has been changed, they are
// invulnerable to each others' explosions if that flag is enabled. Keep
// +DONTHARMCLASS disabled if you want the HS to be vunlerable to each others'
// explosions! Remove the comments and enable the flag if you want the HS to be
// immune to other HS' self-destruct damage.

//End of Hades Sphere